# Generated by Django 3.2.6 on 2025-02-25 17:34

from django.db import migrations, models
from django.db.models import Q
from fowsim import constants as CONS


class Migration(migrations.Migration):

    dependencies = [
        ('cardDatabase', '0058_merge_20250208_1750'),
    ]

    def initClusterAndSets(apps, schema_editor):
        clusters = CONS.SET_DATA['clusters']
        extraSets = CONS.SEARCH_SETS_INCLUDE
        clusterObjects = apps.get_model('cardDatabase', 'Cluster')
        setObjects = apps.get_model('cardDatabase', 'Set')
        for cluster in clusters:
            clusterName = cluster['name']
            clusterEntity = None
            clusterEntity, created = clusterObjects.objects.get_or_create(name=clusterName)
            if created:
                clusterEntity.save()            
            for set in cluster['sets']:
                setName = set['name']
                setCode = set['code']
                if not setObjects.objects.filter(name=setName).exists():
                    setEntity, created = setObjects.objects.get_or_create(name=setName, code=setCode, parent_code=None, cluster=clusterEntity)
                    setEntity.save()
                if setCode not in extraSets:
                    continue
                subSets = extraSets[setCode]
                for subSet in subSets:
                    if not setObjects.objects.filter(name=subSet).exists():
                        setEntity, created = setObjects.objects.get_or_create(name=subSet, code=subSet, parent_code=setCode, cluster=clusterEntity)
                        setEntity.save()

    def initParadox(apps, schema_editor):
        paradoxInitialSets=[
            'HSD', 
            'NWE', 
            'TUS',
            'H2 Buy a Box', 
            'H2 Prerelease Party',
            'TWS',
            'H3 Buy a Box', 
            'H3 Prerelease Party'
            'CMB', 
            'H4 Prerelease Party',
            'H4 Buy a Box',
            'CST', 
            'H5 Buy a Box',
            'H5 Prerelease Party',
            'JRP', 
            'H6 Prerelease Party',
            'TSD1', 
            'TSD2', 
            'TTT', 
            'T1 Buy a Box',
            'TSR', 
            'T2 Buy a Box',
            'TEU', 
            'T3 Buy a Box',
            'MP02', 
            ]
        formats = apps.get_model('cardDatabase', 'Format')
        paradox, created = formats.objects.get_or_create(name='Paradox')
        sets = apps.get_model('cardDatabase', 'Set')
        setQuery = Q()
        for s in paradoxInitialSets:
            setQuery |= Q(code=s)

        paradox.sets.set(sets.objects.filter(setQuery).all())
        paradox.save()

    operations = [
        migrations.AddField(
            model_name='card',
            name='ability_styles',
            field=models.ManyToManyField(blank=True, related_name='cards', through='cardDatabase.CardAbility', to='cardDatabase.AbilityStyle'),
        ),
        migrations.AddField(
            model_name='format',
            name='sets',
            field=models.ManyToManyField(related_name='sets', to='cardDatabase.Set'),
        ),
        migrations.AddField(
            model_name='set',
            name='parent_code',
            field=models.CharField(max_length=200, null=True),
        ),
        migrations.RunPython(initClusterAndSets),
        migrations.RunPython(initParadox),
    ]
