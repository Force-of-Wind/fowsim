# Generated by Django 3.2.6 on 2025-01-10 08:05

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('cardDatabase', '0058_decklist_deck_lock'),
    ]

    def initRoles(apps, schema_editor):
        StaffRoles = apps.get_model('cardDatabase', 'StaffRole')
        if not StaffRoles.objects.filter(title='Owner').exists():
            staffRole, created = StaffRoles.objects.get_or_create(title='Owner', can_read=True, can_write=True, can_delete=True, default=True)
            staffRole.save()
        
        if not StaffRoles.objects.filter(title='Admin').exists():
            staffRole, created = StaffRoles.objects.get_or_create(title='Admin', can_read=True, can_write=True, can_delete=False, default=False)
            staffRole.save()

        if not StaffRoles.objects.filter(title='Readonly').exists():
            staffRole, created = StaffRoles.objects.get_or_create(title='Readonly', can_read=True, can_write=False, can_delete=False, default=False)
            staffRole.save()

    def initTournamentLevels(apps, schema_editor):
        TournamentLevels = apps.get_model('cardDatabase', 'TournamentLevel')
        if not TournamentLevels.objects.filter(code='L0').exists():
            level, created = TournamentLevels.objects.get_or_create(code='L0', title='Community Event', hint='')
            level.save()

        if not TournamentLevels.objects.filter(code='L1').exists():
            level, created = TournamentLevels.objects.get_or_create(code='L1', title='Locals', hint='Official Event. Missuse will be sanctioned!')
            level.save()

        if not TournamentLevels.objects.filter(code='L2').exists():
            level, created = TournamentLevels.objects.get_or_create(code='L2', title='Regional GP', hint='Official Event. Missuse will be sanctioned!')
            level.save()

        if not TournamentLevels.objects.filter(code='L3').exists():
            level, created = TournamentLevels.objects.get_or_create(code='L3', title='National GP', hint='Official Event. Missuse will be sanctioned!')
            level.save()

        if not TournamentLevels.objects.filter(code='L4').exists():
            level, created = TournamentLevels.objects.get_or_create(code='L4', title='International GP', hint='Official Event. Missuse will be sanctioned!')
            level.save()

        if not TournamentLevels.objects.filter(code='L5').exists():
            level, created = TournamentLevels.objects.get_or_create(code='L5', title='WGP', hint='Official Event. Missuse will be sanctioned!')
            level.save()

    operations = [
        migrations.CreateModel(
            name='StaffRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('can_read', models.BooleanField(default=True)),
                ('can_write', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=False)),
                ('default', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('meta_data', models.JSONField()),
                ('is_online', models.BooleanField(default=False)),
                ('registration_deadline', models.DateTimeField()),
                ('registration_locked', models.BooleanField(default=False)),
                ('deck_edit_deadline', models.DateTimeField()),
                ('deck_edit_locked', models.BooleanField(default=False)),
                ('start_datetime', models.DateTimeField()),
                ('phase', models.TextField(blank=True, choices=[['created', 'created'], ['registration', 'registration'], ['swizz', 'swizz'], ['tops', 'tops'], ['completed', 'completed']], default='created', max_length=32, null=True)),
                ('reveal_decklists', models.BooleanField(default=False)),
                ('format', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardDatabase.format')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('code', models.CharField(max_length=2)),
                ('hint', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardDatabase.profile')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardDatabase.staffrole')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardDatabase.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_status', models.TextField(blank=True, choices=[['requested', 'requested'], ['accepted', 'accepted'], ['completed', 'completed']], default=None, max_length=32, null=True)),
                ('user_data', models.JSONField()),
                ('notes', models.CharField(max_length=500)),
                ('standing', models.IntegerField()),
                ('dropped_out', models.BooleanField(default=False)),
                ('deck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardDatabase.decklist')),
                ('last_registration_updated_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardDatabase.profile')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_player', to='cardDatabase.profile')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardDatabase.tournament')),
            ],
        ),
        migrations.AddField(
            model_name='tournament',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardDatabase.tournamentlevel'),
        ),

        migrations.RunPython(initRoles),
        migrations.RunPython(initTournamentLevels),
    ]
